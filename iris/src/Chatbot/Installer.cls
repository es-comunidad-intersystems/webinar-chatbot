Class Chatbot.Installer Extends %RegisteredObject
{

Parameter Namespace = "CHATBOT";

Parameter SourcePath = "/tmp/src";

Parameter DataDBPath = "/opt/chatbot/db/DATA";

Parameter CodeDBPath = "/opt/chatbot/db/CODE";

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
    <Log Text="Creating namespace ${Namespace}" Level="0"/> 
        
    <Namespace Name="${Namespace}" Create="yes" Ensemble="" >
        <Configuration> 
            <Database Name="${Namespace}-DATA" Dir="${DataDBPath}" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
            <Database Name="${Namespace}-APP" Dir="${CodeDBPath}" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
        </Configuration>
        <Import File="${SourcePath}" Recurse="1" Flags="cuk" />
        <Import File="${SourcePath}/Chatbot/API/DialogFlow/impl.cls" Flags="cuk" />
        <Import File="${SourcePath}/Chatbot/API/Telegram/impl.cls" Flags="cuk" />
        <Invoke Class="Chatbot.Data.Appointment" Method="CreateSlots" CheckStatus="true">
        </Invoke>
        <Production Name="Chatbot.Production" AutoStart="1"/>
    </Namespace>

    <Namespace Name="%SYS" Create="no">
        <!-- import SSL config (for https) -->
        <Invoke Class="Security.SSLConfigs" Method="Import" CheckStatus="true">
            <Arg Value="/tmp/install/config-ssl.xml"/>
        </Invoke>
        <!-- api endpoints -->
        <Invoke Class="Security.Applications" Method="Import" CheckStatus="true">
            <Arg Value="/tmp/install/dialogflow-webapp.xml"/>
        </Invoke>
        <Invoke Class="Security.Applications" Method="Import" CheckStatus="true">
            <Arg Value="/tmp/install/telegram-webapp.xml"/>
        </Invoke>
    </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL. 
/// Main setup method
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Entry point    
ClassMethod Run(ByRef vars) As %Status
{
    try { 
        write "START INSTALLER",! 
        
        // set default values for installer variables
        for ivar="SourcePath","Namespace","DataDBPath","CodeDBPath" {
            if '$data(vars(ivar)) set vars(ivar)=$parameter($classname(), ivar)
        } 
        
        set sc = ..RunManifest(.vars) 
        if sc {
            write !,"INSTALLER SUCCESS",!
        } else {
            do $SYSTEM.Process.Terminate($JOB,1)
        }

    } catch ex { 
        set sc = ex.AsStatus() 
        write $System.Status.GetErrorText(sc),! 
        do $SYSTEM.Process.Terminate($JOB,1) 
    } 
    quit sc
}

}
